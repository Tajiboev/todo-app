{"version":3,"sources":["serviceWorkerRegistration.ts","useBodyClass.ts","Components/SwitchModes.tsx","App.tsx","Store/store.ts","index.tsx","Styles/switchmodes.module.sass","Store/typedhooks.ts"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","addBodyClass","className","document","body","classList","add","removeBodyClass","remove","SwitchModes","toggleNightMode","useStoreActions","actions","nightMode","useStoreState","styles","wrapper","dark","with_icon","id","sun_icon","icon","sunIcon","width","switch","onClick","circle","moon_icon","moonIcon","Header","lazy","AddTodo","TodoList","App","useEffect","Array","map","fallback","store","createStore","persist","todos","addTodo","action","payload","push","removeTodo","filter","todo","totalTodos","computed","length","completedTodos","isCompleted","setCompleted","storage","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","module","exports","typedHooks","createTypedHooks","useStoreDispatch"],"mappings":"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","file":"static/js/main.6413233a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useEffect } from \"react\";\r\n\r\nconst addBodyClass = (className: string) => document.body.classList.add(className);\r\nconst removeBodyClass = (className: string) => document.body.classList.remove(className);\r\n\r\nexport default function useBodyClass(className: any) {\r\n\tuseEffect(() => {\r\n\t\t// Set up\r\n\t\tclassName instanceof Array ? className.map(addBodyClass) : addBodyClass(className);\r\n\r\n\t\t// Clean up\r\n\t\treturn () => {\r\n\t\t\tclassName instanceof Array\r\n\t\t\t\t? className.map(removeBodyClass)\r\n\t\t\t\t: removeBodyClass(className);\r\n\t\t};\r\n\t}, [className]);\r\n}\r\n","import { FC } from \"react\";\r\nimport styles from \"../Styles/switchmodes.module.sass\";\r\n\r\nimport { Icon } from \"@iconify/react\";\r\nimport sunIcon from \"@iconify-icons/uil/sun\";\r\nimport moonIcon from \"@iconify-icons/uil/moon\";\r\nimport { useStoreActions, useStoreState } from \"../Store/typedhooks\";\r\n\r\nconst SwitchModes: FC = () => {\r\n\tconst toggleNightMode = useStoreActions((actions) => actions.toggleNightMode);\r\n\tconst nightMode = useStoreState((state) => state.nightMode);\r\n\r\n\tconst handleToggle = () => {\r\n\t\ttoggleNightMode();\r\n\t};\r\n\treturn (\r\n\t\t<div className={styles.wrapper + ` ${nightMode ? styles.dark : \"\"}`}>\r\n\t\t\t<div className={styles.with_icon} id={styles.sun_icon}>\r\n\t\t\t\t<Icon icon={sunIcon} width={22} />\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.switch} onClick={handleToggle}>\r\n\t\t\t\t<div className={styles.circle}></div>\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.with_icon} id={styles.moon_icon}>\r\n\t\t\t\t<Icon icon={moonIcon} width={18} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SwitchModes;\r\n","import { FC, Suspense, lazy } from \"react\";\nimport { useStoreState } from \"./Store/typedhooks\";\nimport useBodyClass from \"./useBodyClass\";\nimport SwitchModes from \"./Components/SwitchModes\";\nimport \"./Styles/app.sass\";\n\nconst Header = lazy(() => import(\"./Components/Header\"));\nconst AddTodo = lazy(() => import(\"./Components/AddTodo\"));\nconst TodoList = lazy(() => import(\"./Components/TodoList\"));\n\nconst App: FC = () => {\n\tconst nightMode = useStoreState((state) => state.nightMode);\n\tconst mode = nightMode ? \"dark\" : \"light\";\n\tuseBodyClass(`${mode}`);\n\n\treturn (\n\t\t<main className=\"main\">\n\t\t\t<Suspense fallback={<div className=\"fallback\">Loading...</div>}>\n\t\t\t\t<SwitchModes />\n\t\t\t\t<Header />\n\t\t\t\t<AddTodo />\n\t\t\t\t<TodoList />\n\t\t\t</Suspense>\n\t\t</main>\n\t);\n};\n\nexport default App;\n","import { createStore, action, computed, persist } from \"easy-peasy\";\r\nimport { IStoreModel } from \"./model\";\r\n\r\nconst store = createStore<IStoreModel>(\r\n\tpersist(\r\n\t\t{\r\n\t\t\tnightMode: false,\r\n\t\t\ttodos: [],\r\n\t\t\taddTodo: action((state, payload) => {\r\n\t\t\t\tstate.todos.push(payload);\r\n\t\t\t}),\r\n\t\t\tremoveTodo: action((state, payload) => {\r\n\t\t\t\tstate.todos = state.todos.filter((todo) => todo.id !== payload.id);\r\n\t\t\t}),\r\n\t\t\ttotalTodos: computed((state) => state.todos.length),\r\n\t\t\tcompletedTodos: computed(\r\n\t\t\t\t(state) => state.todos.filter((todo) => todo.isCompleted).length\r\n\t\t\t),\r\n\t\t\tsetCompleted: action((state, payload) => {\r\n\t\t\t\tstate.todos.map((todo) => {\r\n\t\t\t\t\tif (todo.id === payload.id) {\r\n\t\t\t\t\t\ttodo.isCompleted = !todo.isCompleted;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn todo;\r\n\t\t\t\t});\r\n\t\t\t}),\r\n\t\t\ttoggleNightMode: action((state) => {\r\n\t\t\t\tstate.nightMode = !state.nightMode;\r\n\t\t\t}),\r\n\t\t},\r\n\t\t{ storage: \"localStorage\" }\r\n\t)\r\n);\r\n\r\nexport default store;\r\n","import { render } from \"react-dom\";\nimport { StoreProvider } from \"easy-peasy\";\nimport \"./Styles/basecss.sass\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nimport App from \"./App\";\nimport store from \"./Store/store\";\n\nrender(\n\t<StoreProvider store={store}>\n\t\t<App />\n\t</StoreProvider>,\n\tdocument.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"switchmodes_wrapper__3RGbc\",\"with_icon\":\"switchmodes_with_icon__3zN2E\",\"switch\":\"switchmodes_switch__vsYiC\",\"circle\":\"switchmodes_circle__1yfFS\",\"sun_icon\":\"switchmodes_sun_icon__jUi0f\",\"dark\":\"switchmodes_dark__2LCh4\",\"moon_icon\":\"switchmodes_moon_icon__1HCK3\"};","import { createTypedHooks } from \"easy-peasy\";\r\nimport { IStoreModel } from \"./model\";\r\n\r\nconst typedHooks = createTypedHooks<IStoreModel>();\r\n\r\nexport const useStoreActions = typedHooks.useStoreActions;\r\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\r\nexport const useStoreState = typedHooks.useStoreState;\r\n"],"sourceRoot":""}